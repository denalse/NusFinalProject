MY MOOD PLANNER

ng serve --proxy-config proxy-config.js
mvn clean spring-boot:run

git subtree push --prefix Backend heroku master
*push only the server side (Backend)

Push to Heroku (commands)
heroku login
heroku create
git init
git remote add heroku <url>
git add .
git commit -m "anything"
git push heroku master -u
Wait until completed and 100%, will give url of heroku

<MANIFEST>

https://www.simicart.com/manifest-generator.html/

1. generate the manifest and unzip it and add to assets (USE ONLY 512 x 512)

2.  edit: manifest.webmanifest
        {
            "src": "/assets/icon-192x192.png", <- add /assets in here for every picture
        },
3. edit:
    in, index.html -> include this in head:   
    <link rel="manifest" href="/assets/manifest.webmanifest">

Edits: angular.json -> "optimization": false, line 58
              "optimization": {
                "scripts": true,
                "styles": {
                  "minify": true,
                  "inlineCritical": false
                },
                "fonts": true
              },

PROBLEMS:
    1. integration of npl into calendar?
      - because to be a mood tracker, need to be more courteous with your "reflection"
      - to edit "event" with "personal diary" and emoji?
    2. Saved events in calendar?
    3. when toggle to other pages, the "saved" event will be removed..
    4. Make span text (search.html) gone!!
    
    ** Url did not change to /home/"username" forget about it LOL*

DONE:
    1. Home page
    2. Search page
    3. @imports line 25 of angular.json 
      * add import (for calendar and flatpickr css styling)
    4. Toobar done 80%

    

  ____________________search.ts___________________________

   async getQuote() {
     // this.route.navigate(['/quotes'])
     const res = await fetch('https://type.fit/api/quotes');
     const jsonResponse = await res.json();
     if (!jsonResponse.length) {
       console.log(jsonResponse);
       return [];
     }
     this.random = jsonResponse[Math.floor(Math.random() * jsonResponse.length)];
     // console.log("Author: ", this.random.author, "\nQuote: ", this.random.text)
     // this.data = this.random
     this.quote = this.random;
     console.log("RESULT", this.quote);
     // this.author = this.quote.author
     // console.log("Author:", this.author)
     this.show = true;
     return this.random;
       // .then(quote => {
       //   const author = quote.author;
       //   const text = quote.text;
       //   // console.log(author, "-", text)
       // })
   }  

  ____________________IN REG HTML_________________________________

  <form [formGroup]="form" (ngSubmit)="processForm()">
  <table>
    <tr>
      <td>Email:</td>
      <td>
        <input type="text" size="30" formControlName="email" placeholder="Enter your email">
      </td>
    </tr>
    <tr>
      <td>Password:</td>
      <td>
        <input type="email" size="30" formControlName="password" placeholder="Enter your password"
          [type]="hide ? 'password' : 'text'">
          <mat-icon (click)="passwordEye()">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>
      </td>
    </tr>
    <!-- <tr>
          <td>Confirm Password:</td>
          <td>
              <input type="email" size="30" formControlName="passwordCfm" placeholder="Enter your confirm password" 
              [type]="hide ? 'password' : 'text'">
              <mat-icon (click)="passwordEye2()">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>
          </td>
      </tr> -->
    <tr>
      <td>
        <input type="checkbox" name="terms" value="terms" formControlName="terms"> I have read the terms and conditions.
      </td>
      <td>
    </tr>
    <tr>
      <td>
        <div style="display: flex; justify-content: end;">
          <button type="submit" class="btn btn-primary btn-lg mt-3 ml-5" [disabled]="form.invalid">
            Register Me
          </button>
        </div>
      </td>
    </tr>
  </table>
</form>

____________________Image.html___________________________

<div class="box-it">
	<h2>Search Me</h2>
	<form [formGroup]="form" (ngSubmit)="performSearch()">
		<table>
			<tr>
				<td>Type:</td>
				<td>
					<input type="text" size="30" formControlName="type">

					<!-- <select formControlName="type" aria-placeholder="Enter">
						<option value="g">Gray</option>
						<option value="p">P</option>
						<option value="red">Red</option>
						<option value="green">Green</option>
						<option value="Blue">Blue</option>
					</select> -->
				</td>
			</tr>
			<tr>
				<td>Width:</td>
				<td>
					<input type="number" size="30" formControlName="width">
				</td>
			</tr>
			<tr>
				<td>Height:</td>
				<td>
					<input type="number" size="30" formControlName="height">
				</td>
			</tr>
			<tr>
				<td>Looking for:</td>
				<td>
					<input type="text" size="30" formControlName="search">

				</td>
			</tr>
			<tr>
				<td></td>
				<td>
					<button type="submit" [disabled]="form.invalid">
						Search
					</button>

				</td>
			</tr>
			<mat-card-content>
				<button type="submit" (click)="randomImage()">
					Search Image
				</button>

				<img src="{{ images }}">
			</mat-card-content>
		</table>
	</form>

</div>
_____________________ts.config file___________________________
"compilerOptions": {
// ...
  "noPropertyAccessFromIndexSignature": false,
// ...
}

* change this due to index error in login.ts file
___________________register.html__________________________

<div class="box-it">
  <button mat-raised-button (click)="isLinear = true" id="toggle-linear"></button>

  <mat-horizontal-stepper [linear]="isLinear" #stepper="matHorizontalStepper">
    <mat-step [stepControl]="form1">
      <!-- <form [formGroup]="form1" (ngSubmit)="form1Submit()" #formone="ngForm"> -->
      <form [formGroup]="form1" #formone="ngForm">
        <ng-template matStepLabel>Fill out your username</ng-template>
        <mat-form-field>
          <input matInput placeholder="Eg; fred" formControlName="username" required>
        </mat-form-field>
        <div>
          <button type="button" (click)="form1Submit()" mat-button matStepperNext>Next</button>
        </div>
      </form>
    </mat-step>
    <mat-step [stepControl]="form2">
      <form [formGroup]="form2" #formtwo="ngForm">
        <ng-template matStepLabel>Fill out your password</ng-template>
        <mat-form-field>
          <mat-icon (click)="passwordEye()" matSuffix> {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>
          <input matInput placeholder="Password must be unique" formControlName="password"
            [type]="hide ? 'password' : 'text'" required>
        </mat-form-field>
        <div>
          <button type="button" mat-button matStepperPrevious>Back</button>
          <button type="button" (click)="form2Submit()" mat-button matStepperNext>Next</button>
        </div>
      </form>
    </mat-step>
    <mat-step>
      <ng-template matStepLabel>Done</ng-template>
      You are now done. To proceed, click Submit.
      <div>
        <br>
        <button mat-button color="primary" type="button" (click)="stepper.reset()">Reset</button>
        <button mat-button type="submit" (click)="onSubmit()">Submit</button>
        <!--
        <button mat-button type="submit" (click)="formone.ngSubmit.emit();formtwo.ngSubmit.emit()">
          Submit
        </button>
      -->
      </div>
    </mat-step>
  </mat-horizontal-stepper>
</div>


import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { User } from 'src/app/models';
import { AuthService } from 'src/app/services/auth.service';


@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css']
})
export class RegisterComponent implements OnInit {

  form!: FormGroup
  isLinear = true;
  form1!: FormGroup
  form2!: FormGroup
  hide: boolean = true

  username = ""
  password = ""

  formSubmitAttempt!: boolean;

  isSuccessful = false;
  isSignUpFailed = false;
  errorMessage = '';

  constructor(private fb: FormBuilder, private authService: AuthService) { }

  ngOnInit(): void {
    // this.form = this.createForm();
    this.form1 = this.addform1();
    this.form2 = this.addform2();

  }

  addform1() {
    return this.form1 = this.fb.group({
      username: this.fb.control<string>('', [Validators.required]),
      // password: this.fb.control<string>('', [Validators.required, Validators.minLength(8)]),

    })
  }

  form1Submit() {
    this.username = this.form1.value.username
    console.info(">>>>> Register Form (username): ", this.username)

  }

  addform2() {
    return this.form2 = this.fb.group({
      password: this.fb.control<string>('', [Validators.required, Validators.minLength(8)]),
    })
  }

  
  form2Submit() {
    this.password = this.form2.value.password
    console.info(">>>>> Register Form (password): ", this.password)
  }
  
  // form3() {
  //   console.info(`>>>> username: ${this.username}, password: ${this.password}`)
  //   const getForm: User = this.form.value as User
  //   this.form = this.addform1(), this.addform2();
  //   console.info(this.form)
  //   // const getForm = "username: " + this.username + "\npassword: " + this.password
  //   console.info(`>>>> Form: ${getForm}`)
  //   return getForm
  // }

  onSubmit(): void {

    this.form = this.addform1(), this.addform2();
    
    this.authService.register(this.username, this.password).subscribe({
      next: data => {
        console.log(data);
        this.isSuccessful = true;
        this.isSignUpFailed = false;
      },
      error: err => {
        this.errorMessage = err.error.message;
        this.isSignUpFailed = true;
      }
    });
  }

  reset() {
    this.form.reset();
    this.formSubmitAttempt = false;
  }

  passwordEye() {
    this.hide = !this.hide;
  }

}


_____________________________________________________________
function add(n1: number, n2: number, n3?: number ): number {
    return n3? n1 + n2 + n3 : n1 + n2;
  }
    console.log(add(2, 3)); 